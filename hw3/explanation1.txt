The code requires specific parameters for execution, including the network location (interface) to monitor 
and a file listing particular website names (hostnames).
Without these parameters, default settings apply, covering all website names and setting the local machine's IP as spoofed resolution IP.

Scapy has been used to sniff the packets, analyze them and understand when to respond inject a forged response.

Reference: https://www.geeksforgeeks.org/packet-sniffing-using-scapy/
Reference: https://jasonmurray.org/posts/2020/scapydns/

Upon capturing a packet, the system evaluates whether to modify its response, depending on whether the website
name appears in the provided list or if no list is available.
If modification is necessary, a fabricated DNS response is generated using Scapy.

If the conditions are met, we send the DNS forged response.
The IP and UDP layers of the response packet are built by reversing the source and destination 
addresses/ports from the original query packet. The DNS layer is built by copying the query ID 
and queried domain name from the original packet, and setting the response fields appropriately.
The an field is set to a DNSRR (DNS Resource Record) object containing the spoofed IP address for the queried domain.

Reference: https://courses.cs.duke.edu//fall16/compsci356/DNS/DNS-primer.pdf

Using `dig` we can verify the program.
Reference: https://phoenixnap.com/kb/linux-dig-command-examples

By running:
`dig @1.1.1.1 google.com`
`dig @1.1.1.1 impara.net`
`dig @1.1.1.1 impara.net`
`dig @1.1.1.1 foo1234.example.com`
`dig @1.1.1.1 foo1234.example.com`

it is possible to check whether the program is sending forged response packets.

Eventually, by analyzing `injection.pcap` we can actually see the forged responses with incorrect DNS resolution and
the legitimate ones with the correct IP.

When the forged response arrives before the legitimate response, winning the race condition, the victim will mistakenly treat the malicious response as legitimate.